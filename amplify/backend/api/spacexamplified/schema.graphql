type Rockets @model {
  id: ID!
  name: String
  type: String
  active: Boolean
  stages: Int
  boosters: Int
  cost_per_launch: Int
  success_rate_pct: Int
  first_flight: String
  country: String
  company: String
  height: Height
  diameter: Diameter
  mass: Mass
  payload_weights: [RocketPayloadWeights]
  first_stage: RocketFirstStage
  second_stage: RocketSecondStage
  engines: RocketEngines
  landing_legs: RocketLandingLegs
  flickr_images: [String]
  wikipedia: String
  description: String
}

type Launch @model {
  flight_number: Int!
  name: String!
  date_utc: String!
  date_unix: Int!
  date_local: String!
  date_precision: DatePrecision!
  static_fire_date_utc: String
  static_fire_date_unix: Int
  tdb: Boolean
  net: Boolean
  window: Int
  rocket: String
  failures: [String]
  upcoming: Boolean
  details: String
  fairings: LaunchFairings
  crew: [String]
  ships: [String]
  capsules: [String]
  payloads: [String]
  launchpad: String
  cores: [LaunchCore]
  links: LaunchLinks
  auto_update: Boolean
}

type Payload @model {
  name: String!
  type: String
  reused: Boolean
  launch: String
  customers: [String]
  norad_ids: [Int]
  nationalities: [String]
  manufacturers: [String]
  mass_kg: Float
  mass_lbs: Float
  orbit: String
  reference_system: String
  regime: String
  longitude: Float
  semi_major_axis_km: Float
  eccentricity: Float
  periapsis_km: Float
  apoapsis_km: Float
  inclination_deg: Float
  period_min: Float
  lifespan_years: Float
  epoch: String
  mean_motion: Float
  raan: Float
  arg_of_pericenter: Float
  mean_anomaly: Float
  dragon: DragonCapsule
}

type Height {
  meters: Float
  feet: Float
}

type Diameter {
  meters: Float
  feet: Float
}

type Mass {
  kg: Int
  lb: Int
}

type RocketPayloadWeights {
  id: String
  name: String
  kg: Int
  lb: Int
}

type RocketFirstStage {
  reusable: Boolean
  engines: Int
  fuel_amount_tons: Float
  burn_time_sec: Int
  thrust_sea_level: Thrust
  thrust_vacuum: Thrust
}

type Thrust {
  kN: Float
  lbf: Float
}

type RocketSecondStage {
  reusable: Boolean
  engines: Int
  fuel_amount_tons: Float
  burn_time_sec: Int
  thrust: Thrust
  payloads: RocketSecondStagePayload
}

type RocketSecondStagePayload {
  option_1: String
  composite_fairing: CompositeFairing
}

type CompositeFairing {
  height: Height
  diameter: Diameter
}

type RocketEngines {
  number: Int
  type: String
  version: String
  layout: String
  isp: Isp
  engine_loss_max: Int
  propellant_1: String
  propellant_2: String
  thrust_sea_level: Thrust
  thrust_vacuum: Thrust
  thrust_to_weight: Float
}

type Isp {
  sea_level: Int
  vacuum: Int
}

type RocketLandingLegs {
  number: Int
  material: String
}

enum DatePrecision {
  half
  quarter
  year
  month
  day
  hour
}

type LaunchFairings {
  reused: Boolean
  recovery_attempt: Boolean
  recovered: Boolean
  ships: [String]
}

type LaunchCore {
  core: String
  flight: Int
  gridfins: Boolean
  legs: Boolean
  reused: Boolean
  landing_attempt: Boolean
  landing_success: Boolean
  landing_type: String
  landpad: String
}

type LaunchLinks {
  patch: PatchLinks
  reddit: RedditLinks
  flickr: FlickrLinks
  presskit: String
  webcast: String
  youtube_id: String
  article: String
  wikipedia: String
}

type PatchLinks {
  small: String
  large: String
}

type RedditLinks {
  campaign: String
  launch: String
  media: String
  recovery: String
}

type FlickrLinks {
  small: String
  original: String
}

type DragonCapsule {
  capsule: String
  mass_returned_kg: Int
  mass_returned_lbs: Int
  flight_time_sec: Int
  manifest: String
  water_landing: Boolean
  land_landing: Boolean
}

type RocketsFetch {
  id: String
  name: String
  type: String
  active: Boolean
  stages: Int
  boosters: Int
  cost_per_launch: Int
  success_rate_pct: Int
  first_flight: String
  country: String
  company: String
  height: Height
  diameter: Diameter
  mass: Mass
  payload_weights: [RocketPayloadWeights]
  first_stage: RocketFirstStage
  second_stage: RocketSecondStage
  engines: RocketEngines
  landing_legs: RocketLandingLegs
  flickr_images: [String]
  wikipedia: String
  description: String
}

type LaunchFetch {
  flight_number: Int!
  name: String!
  date_utc: String!
  date_unix: Int!
  date_local: String!
  date_precision: DatePrecision!
  static_fire_date_utc: String
  static_fire_date_unix: Int
  tdb: Boolean
  net: Boolean
  window: Int
  rocket: String
  failures: [String]
  upcoming: Boolean
  details: String
  fairings: LaunchFairings
  crew: [String]
  ships: [String]
  capsules: [String]
  payloads: [String]
  launchpad: String
  cores: [LaunchCore]
  links: LaunchLinks
  auto_update: Boolean
}

type PayloadFetch {
  name: String!
  type: String
  reused: Boolean
  launch: String
  customers: [String]
  norad_ids: [Int]
  nationalities: [String]
  manufacturers: [String]
  mass_kg: Int
  orbit: String
  reference_system: String
  regime: String
  longitude: Int
  semi_major_axis_km: Int
  eccentricity: Int
  periapsis_km: Int
  apoapsis_km: Int
  inclination_deg: Int
  period_min: Int
  lifespan_years: Int
  epoch: String
  mean_motion: Int
  raan: Int
  arg_of_pericenter: Int
  mean_anomaly: Int
  dragon: DragonCapsule
}

type Query {
  fetchRockets: [RocketsFetch]
    @http(url: "https://api.spacexdata.com/v4/rockets")
  fetchLaunches: [LaunchFetch]
    @http(url: "https://api.spacexdata.com/v4//launches/past")
  fetchPayloads: [PayloadFetch]
    @http(url: "https://api.spacexdata.com/v4//payloads")
}
